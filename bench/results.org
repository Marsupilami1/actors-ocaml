#+title: Bench results

* Ackerman
Note that actor creation is not part of the bench.
** Await: 5.23/s
Latencies for 50 iterations of "Ackerman(3, 4), await":
Ackerman(3, 4), await: 11.29 WALL (11.44 usr +  0.29 sys = 11.73 CPU) @  4.26/s (n=50)
                        Rate Ackerman(3, 4), await
Ackerman(3, 4), await 4.26/s                    --

** Forward: 12.1/s
Latencies for 100000 iterations of "Ackerman(3, 4), forward":
Ackerman(3, 4), forward:  0.36 WALL ( 0.55 usr +  0.10 sys =  0.65 CPU) @ 153129.27/s (n=100000)
                            Rate Ackerman(3, 4), forward
Ackerman(3, 4), forward 153129/s                      --

** Forward + lifted promise 306/s
Latencies for 1000 iterations of "Ackerman(3, 4), lifted":
Ackerman(3, 4), lifted:  0.84 WALL ( 1.74 usr +  0.05 sys =  1.79 CPU) @ 559.33/s (n=1000)
                        Rate Ackerman(3, 4), lifted
Ackerman(3, 4), lifted 559/s                     --

** Eio.Fiber.fork_promise 331/s
Latencies for 1000 iterations of "Ackerman(3, 4), await":
Ackerman(3, 4), await:  3.03 WALL ( 3.02 usr +  0.00 sys =  3.02 CPU) @ 330.66/s (n=1000)
                       Rate Ackerman(3, 4), await
Ackerman(3, 4), await 331/s                    --

* Factorial
** Tail recursive (100_000)
Latencies for 10000 iterations of "fact term fut":
fact term fut:  1.29 WALL ( 1.29 usr +  0.00 sys =  1.29 CPU) @ 7781.55/s (n=10000)
                Rate fact term fut
fact term fut 7782/s            --

** Basic Actorsocaml (10_000)
Latencies for 10000 iterations of "fact basic fut":
fact basic fut:  0.91 WALL ( 0.91 usr +  0.00 sys =  0.91 CPU) @ 10957.88/s (n=10000)
                  Rate fact basic fut
fact basic fut 10958/s             --

** Basic with monadic let (10_000)
Latencies for 10000 iterations of "fact basic futm":
fact basic futm:  4.70 WALL ( 4.70 usr +  0.00 sys =  4.70 CPU) @ 2128.03/s (n=10000)
                  Rate fact basic futm
fact basic futm 2128/s              --

** Basic with fmap (10_000)
Latencies for 10000 iterations of "fact fmap fut":
fact fmap fut:  2.01 WALL ( 2.01 usr +  0.00 sys =  2.01 CPU) @ 4986.55/s (n=10000)
                Rate fact fmap fut
fact fmap fut 4987/s            --

** Basic eio (10_000)
Latencies for 10000 iterations of "fact basic eio":
fact basic eio:  1.22 WALL ( 1.21 usr +  0.00 sys =  1.21 CPU) @ 8231.37/s (n=10000)
                 Rate fact basic eio
fact basic eio 8231/s             --

* Linked list (Be careful, results are in iter/s _OR_ s/iter)
System time is significant here.
Can not allocate more than 127 Domains (so max 128 with the main domain).
** Basic
*** 1000 nodes
Latencies for 100 iterations of "Linked list":
Linked list:  1.61 WALL ( 3.72 usr +  0.82 sys =  4.54 CPU) @ 22.04/s (n=100)
              Rate Linked list
Linked list 22.0/s          --

*** 10_000 nodes
Latencies for 10 iterations of "Linked list":
Linked list:  5.46 WALL (20.04 usr +  1.28 sys = 21.32 CPU) @  0.47/s (n=10)
            s/iter Linked list
Linked list   2.13          --

** Tail recursive
*** 1000 nodes
Latencies for 100 iterations of "Linked list":
Linked list:  1.66 WALL ( 3.63 usr +  0.96 sys =  4.59 CPU) @ 21.79/s (n=100)
              Rate Linked list
Linked list 21.8/s          --

*** 1000 nodes forward
Latencies for 100 iterations of "Linked list":
Linked list:  1.06 WALL ( 2.21 usr +  0.64 sys =  2.85 CPU) @ 35.11/s (n=100)
              Rate Linked list
Linked list 35.1/s          --

*** 10_000 nodes
Latencies for 10 iterations of "Linked list":
Linked list:  5.46 WALL (19.52 usr +  1.22 sys = 20.75 CPU) @  0.48/s (n=10)
            s/iter Linked list
Linked list   2.07          --

*** 10_000 nodes forward
Latencies for 10 iterations of "Linked list":
Linked list:  4.01 WALL (14.12 usr +  0.65 sys = 14.77 CPU) @  0.68/s (n=10)
            s/iter Linked list
Linked list   1.48          --

* Broadcast
We consider a complete graph of size ~graph_size~ and a number of hops ~hops~.
When a node receive a message ~n~, it sends ~n - 1~ to all its neighbors.
** Basic style: 10 nodes, 5 hops (~ 10^5 messages)
Latencies for 10 iterations of "Broadcast Basic":
Broadcast Basic:  7.47 WALL (15.94 usr +  4.56 sys = 20.49 CPU) @  0.49/s (n=10)
                s/iter Broadcast Basic
Broadcast Basic   2.05              --

** Monadic style: 10 nodes, 5 hops (~ 10^5 messages)
Latencies for 10 iterations of "Broadcast Monad":
Broadcast Monad:  7.45 WALL ( 2.88 usr +  6.19 sys =  9.07 CPU) @  1.10/s (n=10)
                  Rate Broadcast Monad
Broadcast Monad 1.10/s              --

* Matmul
Recursive matrix product, actors split the matrix, send sub computations to other actors, and merge the result
** 8 * 8
Latencies for 1600 iterations of "Mat Mul":
Mat Mul:  1.43 WALL ( 6.01 usr +  0.77 sys =  6.78 CPU) @ 236.01/s (n=1600)
         Rate Mat Mul
Mat Mul 236/s      --

** 16 * 16
Latencies for 160 iterations of "Mat Mul":
Mat Mul:  1.10 WALL ( 6.19 usr +  0.61 sys =  6.80 CPU) @ 23.54/s (n=160)
          Rate Mat Mul
Mat Mul 23.5/s      --

** 32 * 32
Latencies for 40 iterations of "Mat Mul":
Mat Mul:  5.54 WALL (32.33 usr +  2.54 sys = 34.87 CPU) @  1.15/s (n=40)
          Rate Mat Mul
Mat Mul 1.15/s      --

